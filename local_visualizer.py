"""
Teste EVOLUTIVO da C칙mera - Agora com StateManagerAdvanced integrado
Evolu칞칚o incremental: C칙mera + YOLO + StateManager industrial
"""

import cv2
from queue import Empty

from central_manager.core_advanced.orchestrator import Orchestrator

def main():
    """Fun칞칚o principal que inicializa e executa o orquestrador de c칙meras."""
    print("\n" + "=" * 60)
    print(" Iniciando SIAC - Sistema Integrado de An치lise de Caixas")
    print("=" * 60)

    orchestrator = Orchestrator()
    camera_source = 0  # Pode ser o 칤ndice da c칙mera ou o caminho para um arquivo de v칤deo
    orchestrator.add_camera(camera_source)
    orchestrator.start()

    try:
        # Loop principal para visualiza칞칚o e controle
        while True:
            camera_data = orchestrator.get_camera_data(camera_source)
            if not camera_data:
                print(f"Erro: N칚o foi poss칤vel obter dados para a c칙mera {camera_source}")
                break

            try:
                # Tenta pegar o 칰ltimo frame da fila sem bloquear
                data = camera_data['queue'].get_nowait()
                frame = data['frame']
                cv2.imshow(f'SIAC - C칙mera {camera_source}', frame)

            except Empty:
                # Fila vazia, o que 칠 normal. Continue para o pr칩ximo ciclo.
                pass
            
            # Controle por teclado
            key = cv2.waitKey(1) & 0xFF
            if key == 27:  # ESC para sair
                break
            
            # Acessa o processador para enviar comandos
            processor = camera_data['processor']
            if key == ord(' '):
                processor.paused = not processor.paused
            elif key == ord('d'):
                processor.detection_enabled = not processor.detection_enabled
            elif key == ord('r'):
                processor.state_manager._resetar_sistema()
                print(f"\n游댃 StateManager da c칙mera {camera_source} resetado pelo usu치rio.")

    except KeyboardInterrupt:
        print("\nInterrup칞칚o pelo usu치rio detectada.")
    
    finally:
        print("\nFinalizando a aplica칞칚o...")
        orchestrator.stop()
        cv2.destroyAllWindows()
        print("=" * 60)
        print(" Aplica칞칚o finalizada com sucesso.")

if __name__ == "__main__":
    main()
